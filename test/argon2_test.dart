// Copyright (c) 2023, Sudipto Chandra
// All rights reserved. Check LICENSE file for details.

import 'package:hashlib/hashlib.dart';
import 'package:hashlib_codecs/hashlib_codecs.dart';
import 'package:test/test.dart';

void main() {
  // Test cases are generated by https://argon2.online/
  group('Argon2 v19 test', () {
    test("argon2i m=16, t=2, p=1 @ out = 16", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2i,
        hashLength: 16,
        iterations: 2,
        parallelism: 1,
        memorySizeKB: 16,
        salt: "some salt".codeUnits,
      );
      final matcher = "bb5794ea66451b8fce3a84dd02d33949";
      final encoded =
          r"$argon2i$v=19$m=16,t=2,p=1$c29tZSBzYWx0$u1eU6mZFG4/OOoTdAtM5SQ";
      var result = argon2.convert('password'.codeUnits);
      expect(result.hex(), matcher);
      expect(result.encoded(), encoded);
    });
    test("argon2d m=16, t=2, p=1 @ out = 16", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2d,
        hashLength: 16,
        iterations: 2,
        parallelism: 1,
        memorySizeKB: 16,
        salt: "some salt".codeUnits,
      );
      final matcher = "cf916880b91ba8a1390fff6b624baa27";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });
    test("argon2id m=16, t=2, p=1 @ out = 16", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2id,
        hashLength: 16,
        iterations: 2,
        parallelism: 1,
        memorySizeKB: 16,
        salt: "some salt".codeUnits,
      );
      final matcher = "88c91661b3cea3c3853593608881f324";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });

    test("argon2i m=256, t=2, p=4 @ out = 32", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2i,
        hashLength: 32,
        iterations: 2,
        parallelism: 4,
        memorySizeKB: 256,
        salt: "some salt".codeUnits,
      );
      final matcher =
          "aaef1c23ce86889c7d76f5ea214760fb66900916546cde42ebdc47914daed123";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });
    test("argon2d m=256, t=2, p=4 @ out = 32", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2d,
        hashLength: 32,
        iterations: 2,
        parallelism: 4,
        memorySizeKB: 256,
        salt: "some salt".codeUnits,
      );
      final matcher =
          "c31433dbefadf7aa527bbbcc7beace0d8d70973719c6efb1c24fb21278569701";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });
    test("argon2id m=256, t=2, p=4 @ out = 32", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2id,
        hashLength: 32,
        iterations: 2,
        parallelism: 4,
        memorySizeKB: 256,
        salt: "some salt".codeUnits,
      );
      final matcher =
          "c23e4a305f649971527eda884bda6b481004aedd31740460da3d43db8946786f";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });

    test("encoded hash instance check", () {
      final encoded =
          r"$argon2id$v=19$m=128,t=1,p=4$c29tZSBzYWx0$24VHMpaU5EkkdH5rpdnb5zeOf3Y";
      final matcher = "db8547329694e44924747e6ba5d9dbe7378e7f76";
      final argon2 = Argon2.fromEncoded(encoded);
      expect(argon2.type, Argon2Type.argon2id);
      expect(argon2.version, Argon2Version.v13);
      expect(argon2.memorySizeKB, 128);
      expect(argon2.lanes, 4);
      expect(argon2.passes, 1);
      expect(argon2.hashLength, 20);
      expect(argon2.salt, "some salt".codeUnits);
      var result = argon2.convert("password".codeUnits);
      expect(result.hex(), matcher);
      expect(result.encoded(), encoded);
    });

    test("argon2verify with encoded", () {
      final encoded =
          r"$argon2id$v=19$m=128,t=1,p=4$c29tZSBzYWx0$24VHMpaU5EkkdH5rpdnb5zeOf3Y";
      expect(argon2verify(encoded, "password".codeUnits), isTrue);
    });

    test("argon2verify with password", () {
      final matcher = "db8547329694e44924747e6ba5d9dbe7378e7f76";
      var result = Argon2(
        type: Argon2Type.argon2id,
        salt: 'some salt'.codeUnits,
        hashLength: 20,
        iterations: 1,
        parallelism: 4,
        memorySizeKB: 128,
      ).verify(
        fromHex(matcher),
        "password".codeUnits,
      );
      expect(result, true);
    });

    test("multiple call with same instance", () {
      final argon2 = Argon2(
        version: Argon2Version.v13,
        type: Argon2Type.argon2i,
        hashLength: 16,
        iterations: 2,
        parallelism: 1,
        memorySizeKB: 16,
        salt: "some salt".codeUnits,
      );
      final matcher = "bb5794ea66451b8fce3a84dd02d33949";
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
      expect(argon2.convert('password'.codeUnits).hex(), matcher);
    });
  });
}
