// Copyright (c) 2023, Sudipto Chandra
// All rights reserved. Check LICENSE file for details.

import 'package:hashlib/hashlib.dart';
import 'package:hashlib/src/codecs_base.dart';
import 'package:test/test.dart';

void main() {
  group('Poly1305 test', () {
    test('the RFC sample', () {
      var r = fromHex("85d6be7857556d337f4452fe42d506a8");
      var s = fromHex("0103808afb0db2fd4abff6af4149f51b");
      var m = "Cryptographic Forum Research Group".codeUnits;
      var actual = "a8061dc1305136c6c22b8baf0c0127a9";
      expect(poly1305(m, r, s).hex(), actual);
    });

    test("example from NACL", () {
      var key = [
        0xee, 0xa6, 0xa7, 0x25, 0x1c, 0x1e, 0x72, 0x91, //
        0x6d, 0x11, 0xc2, 0xcb, 0x21, 0x4d, 0x3c, 0x25,
        0x25, 0x39, 0x12, 0x1d, 0x8e, 0x23, 0x4e, 0x65,
        0x2d, 0x65, 0x1f, 0xa4, 0xc8, 0xcf, 0xf8, 0x80,
      ];
      var msg = [
        0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73, //
        0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce,
        0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4,
        0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a,
        0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc, 0xe8, 0x7b,
        0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72,
        0x71, 0xd2, 0xc2, 0x0f, 0x9b, 0x92, 0x8f, 0xe2,
        0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38,
        0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a,
        0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae,
        0x90, 0x22, 0x43, 0x68, 0x51, 0x7a, 0xcf, 0xea,
        0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda,
        0x99, 0x83, 0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde,
        0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3,
        0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6,
        0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74,
        0xe3, 0x55, 0xa5
      ];
      var mac = [
        0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5, //
        0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9
      ];
      var res = poly1305auth(msg, key);
      expect(res.bytes, mac);
    });

    test("NACL example with wrap key", () {
      var key = [
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ];
      var msg = [
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
      ];
      var mac = [
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ];
      var res = poly1305auth(msg, key);
      expect(res.bytes, mac);
    });

    test("example from poly1305-donna", () {
      var key = List.generate(32, (i) => (i + 221) & 0xFF);
      var msg = List.generate(73, (i) => (i + 121) & 0xFF);
      var mac = [
        0xdd, 0xb9, 0xda, 0x7d, 0xdd, 0x5e, 0x52, 0x79, //
        0x27, 0x30, 0xed, 0x5c, 0xda, 0x5f, 0x90, 0xa4
      ];
      var res = poly1305auth(msg, key);
      expect(res.bytes, mac);
    });
  });
}
